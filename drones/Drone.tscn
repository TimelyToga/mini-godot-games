[gd_scene load_steps=10 format=2]

[ext_resource path="res://Drone.gd" type="Script" id=1]
[ext_resource path="res://KinematicBody2D.gd" type="Script" id=2]
[ext_resource path="res://Area2D.gd" type="Script" id=4]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
uniform float outline_width = 2.0;
uniform vec4 outline_color: hint_color;

void fragment(){
    vec4 col = texture(TEXTURE, UV);
    vec2 ps = TEXTURE_PIXEL_SIZE * outline_width;
    float a;
    float maxa = col.a;
    float mina = col.a;


    for(float x = -1.0; x <= 1.0; x+=0.05) {
        float y = 1.0 - (x*x);
        if(vec2(x,y) == vec2(0.0)) {
            continue; // ignore the center of kernel
        }

        a = texture(TEXTURE, UV + vec2(x,y)*ps).a;
        maxa = max(a, maxa); 
        mina = min(a, mina);
    }

    for(float x = -1.0; x <= 1.0; x+=0.05) {
        float y = -1.0 + (x*x);
        if(vec2(x,y) == vec2(0.0)) {
            continue; // ignore the center of kernel
        }

        a = texture(TEXTURE, UV + vec2(x,y)*ps).a;
        maxa = max(a, maxa); 
        mina = min(a, mina);
    }


    // Fill transparent pixels only, don't overlap texture
    if(col.a < 0.5) {
        COLOR = mix(col, outline_color, maxa-mina);
    } else {
        COLOR = col;
    }
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/outline_width = 100.0
shader_param/outline_color = Color( 0.356863, 0.470588, 0.827451, 1 )

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

uniform vec4 outline_color: hint_color;
uniform float outline_width = 2.0;
uniform float intensity: hint_range(0.0, 0.1);

void vertex() {
	//We want to grow the vertex
	VERTEX *= 1.0 + intensity;
}

void fragment(){
 	//Get where this would be on the regular image
	vec2 new_uv = UV + ((UV - vec2(0.5)) * intensity);
	
	//Is this outside the original sprite?
	vec4 col;
	if((new_uv.x < 0.0 || new_uv.x > 1.0) || (new_uv.y < 0.0 || new_uv.y > 1.0)){
		//We aren't a real color
		col = outline_color;
	}else{
		//We can just use the actual texture color at this position
		col = vec4(1);
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * outline_width; // multiply only once instead of eight times.
    float a;
    float maxa = col.a;
    float mina = col.a;

    // Use 8-way kernel for smoothness
    //------------------//
    //    X   X   X     //
    //      \\ | /       //
    //    X - O - X     //
    //      / | \\       //
    //    X   X   X     //
    //------------------//

    for(float y = -1.0; y <= 1.0; y++) {
        for(float x = -1.0; x <= 1.0; x++) {
            if(vec2(x,y) == vec2(0.0)) {
                continue; // ignore the center of kernel
            }

            a = texture(TEXTURE, UV + vec2(x,y)*ps).a;
            maxa = max(a, maxa); 
            mina = min(a, mina);
        }
    }

    // Fill transparent pixels only, don't overlap texture
    if(col.a == 0.0) {
        COLOR = mix(col, outline_color, maxa-mina);
    } else {
        // Note on old code: if the last mix value is always 0, why even use it?
        COLOR = col;
    }
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/outline_color = Color( 0.690196, 0.0392157, 0.0392157, 1 )
shader_param/outline_width = 3.0
shader_param/intensity = 0.042

[sub_resource type="ImageTexture" id=12]
size = Vector2( 128, 128 )

[sub_resource type="RectangleShape2D" id=11]
extents = Vector2( 5.9117, 6.26501 )

[node name="Drone" type="Node2D"]
material = SubResource( 4 )
script = ExtResource( 1 )

[node name="KinematicBody2D" type="KinematicBody2D" parent="."]
script = ExtResource( 2 )

[node name="Area2D" type="Area2D" parent="KinematicBody2D"]
scale = Vector2( 2, 2 )
script = ExtResource( 4 )

[node name="Polygon2D" type="Polygon2D" parent="KinematicBody2D/Area2D"]
material = SubResource( 7 )
scale = Vector2( 5.85843, 5.85843 )
texture = SubResource( 12 )
polygon = PoolVector2Array( -1, -1, -1, 1, 1, 1, 1, -1 )
uv = PoolVector2Array( 0, 0, 0, 128, 128, 128, 128, 0 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="KinematicBody2D/Area2D"]
position = Vector2( -0.0328827, -0.00412846 )
shape = SubResource( 11 )
[connection signal="input_event" from="KinematicBody2D" to="." method="_on_KinematicBody2D_input_event"]
[connection signal="input_event" from="KinematicBody2D/Area2D" to="KinematicBody2D" method="_on_Area2D_input_event"]
